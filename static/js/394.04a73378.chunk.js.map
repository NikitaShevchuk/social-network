{"version":3,"file":"static/js/394.04a73378.chunk.js","mappings":"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","sources":["webpack://my-app/./src/components/MainContent/Profile/Profile.module.css?4a10","components/MainContent/Profile/ProfileInfo.tsx","common/ErrorComponent.tsx","components/Feed/NewPost.tsx","components/Feed/Feed.tsx","components/Feed/SinglePost.tsx","redux/selectors/postsReselector.tsx","components/Feed/FeedContainer.tsx","components/MainContent/Profile/EditProfile/EditProfilePhoto.tsx","redux/reducers/profileReducer/actions.ts","components/MainContent/Profile/ProfileHeader/ProfileButtons.tsx","components/MainContent/Profile/ProfileHeader/ProfileButtonsContainer.tsx","components/MainContent/Profile/ProfileHeader/index.tsx","redux/reducers/profileReducer/middleware.ts","components/MainContent/Profile/EditProfile/EditProfileForm.tsx","components/MainContent/Profile/EditProfile/utils.tsx","components/MainContent/Profile/EditProfile/index.tsx","components/MainContent/Profile/ProfileLinks.tsx","components/MainContent/Profile/Profile.tsx","components/MainContent/Profile/ProfileContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"whiteBg\":\"Profile_whiteBg__8Urrp\",\"transparent\":\"Profile_transparent__dfxoD\",\"jobStyle\":\"Profile_jobStyle__vlkcE\",\"green\":\"Profile_green__h6Rho\",\"red\":\"Profile_red__nDpW2\",\"icon\":\"Profile_icon__ZHPkl\",\"additionalInf\":\"Profile_additionalInf__Q7WUM\",\"additionalInfActive\":\"Profile_additionalInfActive__a9nLQ\"};","import React, {FC, memo} from 'react';\r\nimport style from \"./Profile.module.css\";\r\nimport ProfileStatusContainer from \"../../../common/ProfileStatus/ProfileStatusContainer\";\r\nimport {Profile} from \"../../../types/ProfileTypes\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\n\r\nexport interface Props {\r\n    isMyProfile: boolean\r\n    profileEditMode: boolean\r\n    profile: Profile\r\n}\r\n\r\nconst ProfileInfo: FC<Props> = memo(({\r\n    profile, isMyProfile, profileEditMode\r\n}) => {\r\n    const profileBlockClassName = profileEditMode ? 'profile-data hidden' : 'profile-data shown'\r\n    const jobBlockClassName = profile.lookingForAJob ? style.green : style.red\r\n    return (\r\n        <div className={profileBlockClassName}>\r\n            <div className=\"admin-name timeline-info__row\">\r\n                <h5>{profile.fullName}</h5>\r\n                <ProfileStatusContainer\r\n                    isMyProfile={isMyProfile}\r\n                />\r\n            </div>\r\n            <div className='timeline-info__row'>\r\n                <div className=\"lookingForAJob\">\r\n                    {profile.aboutMe && profile.aboutMe !== '' &&\r\n                        <div className=\"small-subtitle\">\r\n                            <FontAwesomeIcon icon={\"fa-solid fa-address-card\" as any} />\r\n                            <span className=\"text\">About:</span>\r\n                            {profile.aboutMe}\r\n                        </div>\r\n                    }\r\n                    <div className='lookingForAJobDescription'>\r\n                        {profile.lookingForAJobDescription}\r\n                    </div>\r\n                    <div className={style.jobStyle}>\r\n                        <FontAwesomeIcon\r\n                            icon={`fa fa-briefcase` as any}\r\n                            className={style.icon}\r\n                        />\r\n                        Job status:\r\n                        <span className={jobBlockClassName}>\r\n                            {profile.lookingForAJob\r\n                                ? ` looking for a job`\r\n                                : ` not interested in job`\r\n                            }\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n});\r\n\r\nexport default ProfileInfo;","import React, {FC} from 'react';\r\n\r\nconst ErrorComponent: FC<{errorText: string | null}> = ({errorText}) => {\r\n    return (\r\n        <div className='local-error'>\r\n            <span className=\"text\">{errorText}</span>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ErrorComponent;","import React from \"react\";\r\nimport {Form, Field} from \"react-final-form\"\r\nimport {addPostActionCreator} from \"../../redux/reducers/postPageReducer\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faFile, faMusic} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\n\r\n\r\nconst NewPostForm = ({onSubmit}: any) => {\r\n    return <Form onSubmit={onSubmit}\r\n                 render={({handleSubmit}) => (\r\n                     <form onSubmit={handleSubmit}>\r\n                         <Field name={'postBody'} initialValue=\"What's new?\" component={'textarea'}/>\r\n                         <div className=\"attachments\">\r\n                             <div className=\"icons\">\r\n                                 <FontAwesomeIcon icon={faMusic} />\r\n                                 <FontAwesomeIcon icon={faFile} />\r\n                             </div>\r\n                             <button className='add-butn'>Post</button>\r\n                         </div>\r\n                     </form>\r\n                 )}\r\n    />\r\n}\r\n\r\nconst NewPost = ({addPostActionCreator}: any) => {\r\n\r\n    const onSubmit = (formData: any) => {\r\n        addPostActionCreator(formData)\r\n    }\r\n    return <div className=\"new-postbox\">\r\n        <div className=\"newpst-input\">\r\n            <NewPostForm onSubmit={onSubmit}/>\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default NewPost;","import React from \"react\";\r\nimport NewPost from \"./NewPost\";\r\n\r\nconst Feed = (props: any) => {\r\n    return (\r\n        <>\r\n            <div className=\"loadMore opacity-animation\">\r\n                <NewPost state={props.state} onPostChange={props.onPostChange}\r\n                         addPostActionCreator={props.addPostActionCreator } postNewText={props.postNewText}\r\n                         profileImg={props.profileImg}/>\r\n                {props.postList}\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Feed;","import React from \"react\";\r\nimport profileBackground from \"../../common/assets/img/profileCover.jpg\";\r\n\r\nconst SinglePost = (props: any) => {\r\n    return (\r\n        <div className=\"user-post\">\r\n            <div className=\"friend-info\">\r\n                <figure>\r\n                    <img src={props.profileImg} alt=\"\"/>\r\n                </figure>\r\n                <div className=\"friend-name\">\r\n                    <ins><a href=\"time-line.html\" title=\"\">{props.userName}</a></ins>\r\n                    <span>published: june,2 2018 19:PM</span>\r\n                </div>\r\n                <div className=\"post-meta\">\r\n                    <img src={profileBackground} alt=\"\"/>\r\n                    <div className=\"we-video-info\">\r\n                        <ul>\r\n                            <li>\r\n                                        <span className=\"views\"\r\n                                              title=\"views\">\r\n                                            <i className=\"fa fa-eye\"></i>\r\n                                            <ins>1.2k</ins>\r\n                                        </span>\r\n                            </li>\r\n                            <li>\r\n                                        <span className=\"comment\"\r\n                                              title=\"Comments\">\r\n                                            <i className=\"fa fa-comments-o\"></i>\r\n                                            <ins>52</ins>\r\n                                        </span>\r\n                            </li>\r\n                            <li>\r\n                                        <span className=\"like\"\r\n                                              title=\"like\">\r\n                                            <i className=\"ti-heart\"></i>\r\n                                            <ins>{props.likesCount}</ins>\r\n                                        </span>\r\n                            </li>\r\n                            <li>\r\n                                        <span className=\"dislike\"\r\n                                              title=\"dislike\">\r\n                                            <i className=\"ti-heart-broken\"></i>\r\n                                            <ins>200</ins>\r\n                                        </span>\r\n                            </li>\r\n                        </ul>\r\n                    </div>\r\n                    <div className=\"description\">\r\n                        <p>\r\n                            {props.postText}\r\n                        </p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SinglePost;","import React from \"react\";\r\nimport {createSelector} from \"reselect\";\r\nimport SinglePost from \"../../components/Feed/SinglePost\";\r\nimport {RootState} from \"../redux-store\";\r\n\r\nconst getPosts = (state: RootState) => state.postPage.posts\r\nconst getProfileImg = (state: RootState) => state.profilePage.profile?.photos.small\r\nconst getUserName= (state: RootState) => state.profilePage.profile.fullName\r\n\r\nexport const postsSelector = createSelector(getPosts, getProfileImg, getUserName, (posts, profileImg, userName) => {\r\n    return posts.map( (postData: any) => <SinglePost postText={postData.postText}\r\n                                              likesCount={postData.likesCount}\r\n                                              profileImg={profileImg}\r\n                                              userName={userName}\r\n                                              key={postData.id}/> )\r\n})","import React from \"react\";\r\nimport Feed from \"./Feed\";\r\nimport {addPostActionCreator} from \"../../redux/reducers/postPageReducer\";\r\nimport {connect} from \"react-redux\";\r\nimport {postsSelector} from '../../redux/selectors/postsReselector'\r\nimport {RootState} from \"../../redux/redux-store\";\r\n\r\nconst mapStateToProps = (state: RootState) => {\r\n    return {\r\n        postList: postsSelector(state),\r\n        profileImg: state.auth.profileImg\r\n    }\r\n}\r\n\r\nconst FeedContainer = connect(mapStateToProps, {addPostActionCreator})(Feed)\r\n\r\nexport default FeedContainer;","import React, {FC, memo} from 'react';\r\n\r\ninterface Props {\r\n    onPhotoUpload: (e: React.ChangeEvent<HTMLInputElement>) => void\r\n}\r\n\r\nconst EditProfilePhoto: FC<Props> = memo(({onPhotoUpload}) => {\r\n    return (\r\n        <form className=\"edit-phto\">\r\n            <i className=\"fa fa-edit\"/>\r\n            <label className=\"fileContainer\">\r\n                Edit profile photo\r\n                <input\r\n                    onChange={onPhotoUpload}\r\n                    type=\"file\"\r\n                    accept=\".jpg, .jpeg, .png\"\r\n                />\r\n            </label>\r\n        </form>\r\n    );\r\n});\r\n\r\nexport default EditProfilePhoto;","import {EditProfilePutRequestData, Profile} from \"../../../types/ProfileTypes\";\r\nimport {InferActionsTypes} from \"../../redux-store\";\r\nimport {Photos} from \"../../../types/Photos\";\r\n\r\nexport const profileActions = {\r\n    ableButton: () => ({type: 'profileReducer/ABLE_BUTTON'} as const),\r\n    disableButton: () => ({type: 'profileReducer/DISABLE_BUTTON'} as const),\r\n    followUserProfile: () => ({type: 'profileReducer/FOLLOW_USER'} as const),\r\n    unfollowUserProfile: () => ({type: 'profileReducer/UNFOLLOW_USER'} as const),\r\n    isPhotoUpdating: (isUpdating: boolean) => ({type: 'profileReducer/PHOTO_UPDATING', isUpdating} as const),\r\n    setProfileEditMode: (isInEditMode: boolean) => ({type: 'profileReducer/SET_PROFILE_EDIT_MODE', isInEditMode} as const),\r\n    setSocialMediaEditMode: (isInEditMode: boolean) => ({type: 'profileReducer/SET_SOCIAL_MEDIA_EDIT_MODE', isInEditMode} as const),\r\n\r\n    // Load profile\r\n    photoUploadedSuccessfully: (photos: Photos) => ({type: 'profileReducer/UPD_PHOTO', photos} as const),\r\n    setUpdatedProfile: (profile: EditProfilePutRequestData) => ({type: 'profileReducer/UPDATE_PROFILE', profile} as const),\r\n    setIsProfileLoading: (isLoading: boolean) => ({type: 'profileReducer/SET_IS_PROFILE_LOADING', isLoading} as const),\r\n    setProfile: (profile: Profile) => ({type: 'profileReducer/SET_PROFILE', profile} as const),\r\n    setStatus: (status: string) => ({type: 'profileReducer/SET_STATUS', status} as const),\r\n    setUserId: (userId: number) => ({type: 'profileReducer/SET_USER_ID', userId} as const),\r\n    setIsMyProfile: (isMyProfile: boolean) => ({type: 'profileReducer/SET_IS_MY_PROFILE', isMyProfile} as const),\r\n\r\n    // Errors handles\r\n    addLocalError: (localError: string) => ({type: 'profileReducer/ADD_LOCAL_ERROR', localError} as const),\r\n    addProfileFetchError: (errorText: string) => ({type: 'profileReducer/ADD_PROFILE_FETCH_ERROR', errorText} as const),\r\n    removeProfileFetchError: () => ({type: 'profileReducer/REMOVE_PROFILE_FETCH_ERROR'} as const)\r\n}\r\n\r\nexport const {\r\n    setProfileEditMode, setUpdatedProfile, followUserProfile, unfollowUserProfile, setUserId, setIsMyProfile,\r\n    addLocalError, photoUploadedSuccessfully, isPhotoUpdating, disableButton, ableButton, setStatus, setProfile,\r\n    addProfileFetchError, setIsProfileLoading, removeProfileFetchError, setSocialMediaEditMode\r\n} = profileActions\r\n\r\nexport type ProfileActionsTypes = InferActionsTypes<typeof profileActions>","import React, {FC} from 'react';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport FollowButton from \"../../../Buttons/FollowButton\";\r\nimport MessageButton from \"../../../Buttons/MessageButton\";\r\n\r\ninterface Props {\r\n    isMyProfile: boolean\r\n    disableWhileRequest: boolean\r\n    enterEditMode: () => void\r\n    followed: boolean\r\n    userId: number\r\n    profileEditMode: boolean\r\n}\r\n\r\nconst ProfileButtons: FC<Props> = ({\r\n    isMyProfile, disableWhileRequest, followed,\r\n    enterEditMode, userId, profileEditMode\r\n}) => {\r\n    return (\r\n        <div className=\"profile-buttons\">\r\n            {isMyProfile\r\n                ? !profileEditMode && (\r\n                    <button\r\n                        onClick={enterEditMode}\r\n                        className=\"add-butn transparent\"\r\n                    >\r\n                        Edit profile\r\n                    </button>\r\n                  )\r\n                : <>\r\n                    <FollowButton\r\n                        followed={followed}\r\n                        userId={userId}\r\n                        disabled={disableWhileRequest}\r\n                    />\r\n                    <MessageButton userId={userId} />\r\n                </>\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ProfileButtons;","import React, {FC} from 'react';\r\nimport {RootState} from \"../../../../redux/redux-store\";\r\nimport {connect, ConnectedProps} from \"react-redux\";\r\nimport ProfileButtons from \"./ProfileButtons\";\r\nimport {setProfileEditMode} from \"../../../../redux/reducers/profileReducer/actions\";\r\n\r\nconst ProfileButtonsContainer: FC<ProfileButtonsConnectedProps> = ({\r\n    setProfileEditMode, isMyProfile, userId, disableWhileRequest,\r\n    followed, profileEditMode\r\n}) => {\r\n    const enterEditMode = () => setProfileEditMode(true)\r\n    return (\r\n        <ProfileButtons\r\n            isMyProfile={isMyProfile}\r\n            disableWhileRequest={disableWhileRequest}\r\n            enterEditMode={enterEditMode}\r\n            followed={followed}\r\n            userId={userId}\r\n            profileEditMode={profileEditMode}\r\n        />\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n    followed: state.profilePage.followed,\r\n    disableWhileRequest: state.profilePage.disableWhileRequest,\r\n    isMyProfile: state.profilePage.isMyProfile,\r\n    userId: state.profilePage.userIdParam,\r\n    profileEditMode: state.profilePage.profileEditMode\r\n})\r\n\r\nconst connector = connect(\r\n    mapStateToProps,\r\n    {setProfileEditMode}\r\n)\r\nexport default connector(ProfileButtonsContainer);\r\nexport type ProfileButtonsConnectedProps = ConnectedProps<typeof connector>","import React, {FC} from 'react';\r\nimport style from \"../Profile.module.css\";\r\nimport Preloader from \"../../../../preloaders/Preloader\";\r\nimport UserPhoto from \"../../../../common/UserPhoto\";\r\nimport EditProfilePhoto from \"../EditProfile/EditProfilePhoto\";\r\nimport {connect, ConnectedProps} from \"react-redux\";\r\nimport {RootState} from \"../../../../redux/redux-store\";\r\nimport {updatePhoto} from \"../../../../redux/reducers/profileReducer/middleware\";\r\nimport ProfileButtonsContainer from \"./ProfileButtonsContainer\";\r\n\r\ninterface Props extends ProfileHeaderConnectedProps {\r\n    profileLargePhoto: string | null\r\n}\r\n\r\nconst ProfileHeader: FC<Props> = ({\r\n    profileLargePhoto, photoIsUpdating, isMyProfile, updatePhoto\r\n}) => {\r\n    const figureClassName = profileLargePhoto && !photoIsUpdating ? style.transparent : style.whiteBg\r\n    const onPhotoUpload = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        const inputFiles = e.target.files ? e.target.files[0] : null\r\n        if (inputFiles) updatePhoto(inputFiles)\r\n    }\r\n    return (\r\n        <div className=\"profile-header\">\r\n            <div className=\"user-avatar\">\r\n                <figure className={figureClassName}>\r\n                    {photoIsUpdating\r\n                        ? <Preloader/>\r\n                        : <UserPhoto profileImg={profileLargePhoto}/>\r\n                    }\r\n                    {isMyProfile &&\r\n                        <EditProfilePhoto onPhotoUpload={onPhotoUpload} />\r\n                    }\r\n                </figure>\r\n            </div>\r\n            <ProfileButtonsContainer />\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n    photoIsUpdating: state.profilePage.photoIsUpdating,\r\n    isMyProfile: state.profilePage.isMyProfile,\r\n})\r\n\r\nconst connector = connect(mapStateToProps, {updatePhoto})\r\nexport default connector(ProfileHeader);\r\ntype ProfileHeaderConnectedProps = ConnectedProps<typeof connector>","import {ResultCodes} from \"../../../services\";\r\nimport {profileActions} from \"./actions\";\r\nimport {authActions} from \"../authReducer/actions\";\r\nimport {profileService} from \"../../../services/profileService\";\r\nimport {usersService} from \"../../../services/usersService\";\r\nimport {AsyncThunk} from \"../../Models\";\r\nimport {appActions} from \"../appReducer/actions\";\r\nimport {EditProfilePutRequestData} from \"../../../types/ProfileTypes\";\r\n\r\nexport const loadProfile = (id: number): AsyncThunk => async (dispatch) => {\r\n    dispatch(profileActions.setIsProfileLoading(true))\r\n    try {\r\n        const isFollowing = await usersService.isFollowing(id)\r\n        if (isFollowing) dispatch(profileActions.followUserProfile());\r\n        else dispatch(profileActions.unfollowUserProfile());\r\n        const profileData = await profileService.getProfile(id)\r\n        dispatch(profileActions.setProfile(profileData))\r\n        const status = await profileService.getStatus(id)\r\n        dispatch(profileActions.setStatus(status))\r\n        dispatch(profileActions.removeProfileFetchError())\r\n    } catch {\r\n        dispatch(profileActions.addProfileFetchError(\"Can't load profile\"))\r\n    }\r\n    dispatch(profileActions.setIsProfileLoading(false))\r\n}\r\n\r\nexport const getMyProfileFromState = (): AsyncThunk => (dispatch, getState) => {\r\n    dispatch(profileActions.setIsProfileLoading(true))\r\n    const myProfileFromState = getState().auth.clientProfile\r\n    if (myProfileFromState.userId !== 0) dispatch(profileActions.setProfile(myProfileFromState))\r\n    dispatch(profileActions.setIsProfileLoading(false))\r\n}\r\n\r\nexport const followUser = (id: number): AsyncThunk => async (dispatch) => {\r\n    try {\r\n        dispatch(profileActions.disableButton())\r\n        const response = await usersService.follow(id)\r\n        if (response.resultCode === ResultCodes.Success) {\r\n            dispatch(profileActions.followUserProfile())\r\n            dispatch(profileActions.ableButton())\r\n        } else if (response.resultCode === ResultCodes.Error) {\r\n            dispatch(appActions.addError(response.messages[0]))\r\n        }\r\n    } catch {\r\n        dispatch(appActions.addError('Network error'))\r\n    }\r\n}\r\n\r\nexport const unfollowUser = (id: number): AsyncThunk => async (dispatch) => {\r\n    try {\r\n        dispatch(profileActions.disableButton());\r\n        const response = await usersService.unfollow(id)\r\n        if (response.resultCode === ResultCodes.Success) {\r\n            dispatch(profileActions.unfollowUserProfile());\r\n            dispatch(profileActions.ableButton());\r\n        } else if (response.resultCode === ResultCodes.Error) {\r\n            dispatch(appActions.addError(response.messages[0]))\r\n        }\r\n    } catch {\r\n        dispatch(appActions.addError('Network error'))\r\n    }\r\n}\r\n\r\nexport const updatePhoto = (photo: File | null): AsyncThunk => async (dispatch) => {\r\n    try {\r\n        dispatch(profileActions.isPhotoUpdating(true))\r\n        const response = await profileService.uploadPhoto(photo);\r\n        dispatch(profileActions.isPhotoUpdating(false))\r\n        if (response.resultCode === ResultCodes.Success) {\r\n            dispatch(authActions.setUserPhoto(response.data.photos.large))\r\n            dispatch(profileActions.photoUploadedSuccessfully(response.data.photos))\r\n        } else {\r\n            dispatch(profileActions.addLocalError(response.messages[0]))\r\n            setTimeout(() => {\r\n                dispatch(profileActions.addLocalError(''))\r\n            }, 5000)\r\n        }\r\n    } catch {\r\n        dispatch(appActions.addError('Network error'))\r\n    }\r\n}\r\n\r\nexport const updateProfile = (updatedProfile: EditProfilePutRequestData): AsyncThunk => async (dispatch) => {\r\n    try {\r\n        const profile = await profileService.updateProfile(updatedProfile);\r\n        if (profile.resultCode === ResultCodes.Success) {\r\n            dispatch(\r\n                profileActions.setUpdatedProfile(updatedProfile)\r\n            )\r\n        } else if (profile.resultCode === ResultCodes.Error) {\r\n            dispatch(profileActions.addLocalError(profile.messages[0]))\r\n            setTimeout(() => {\r\n                dispatch(profileActions.addLocalError(''))\r\n            }, 5000)\r\n        }\r\n    } catch {\r\n        dispatch(appActions.addError('Network error'))\r\n    }\r\n}","import React, {FC, forwardRef, LegacyRef, useState} from 'react';\r\nimport {AnyObject} from \"react-final-form\";\r\nimport ProfileStatusContainer from \"../../../../common/ProfileStatus/ProfileStatusContainer\";\r\nimport style from \"../Profile.module.css\";\r\nimport classNames from \"classnames\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {useGetFields} from \"./utils\";\r\nimport {ContactsArray} from \"../../../../types/ProfileTypes\";\r\nimport {createFieldWithInitVal} from \"../../../../common/helpers/createField\";\r\nimport {isLink} from \"../../../../common/helpers/validators\";\r\n\r\ninterface Props {\r\n    handleSubmit: (event?:\r\n       (Partial<Pick<React.SyntheticEvent<Element, Event>, \"preventDefault\" | \"stopPropagation\">> | undefined)\r\n    ) => (Promise<AnyObject | undefined> | undefined)\r\n    pristine: boolean\r\n    submitting: boolean\r\n    lookingForAJob: boolean\r\n    isMyProfile: boolean\r\n    profileEditMode: boolean\r\n    socialMediaEditMode: boolean\r\n    disableEditMode: () => void\r\n    contactsArray: ContactsArray\r\n    ref: any\r\n}\r\n\r\nconst EditProfileForm: FC<Props> = forwardRef(({\r\n    submitting, pristine, handleSubmit, disableEditMode,\r\n    lookingForAJob, isMyProfile, profileEditMode,\r\n    socialMediaEditMode, contactsArray\r\n}, ref) => {\r\n\r\n    const {\r\n        fullNameField, userIdField, jobDescriptionField, jobCheckBox, aboutMeField,\r\n    } = useGetFields()\r\n    const [lookingForAJobState, setLookingFoAJobState] = useState<boolean>(lookingForAJob)\r\n    const toggleJobState = () => setLookingFoAJobState(!lookingForAJobState)\r\n\r\n    const jobBlockClassName = lookingForAJobState ? style.green : style.red\r\n    const formClassName = profileEditMode ? 'profile-data shown' : 'profile-data hidden'\r\n    const editSocialMediaClassName = socialMediaEditMode ? style.additionalInfActive : style.additionalInf\r\n    return (\r\n        <form\r\n            className={classNames(formClassName, 'edit-profile-form')}\r\n            onSubmit={handleSubmit}\r\n            ref={ref as LegacyRef<HTMLFormElement> | undefined}\r\n        >\r\n            <div className=\"admin-name timeline-info__row\">\r\n                {userIdField}\r\n                <h5>\r\n                    {fullNameField}\r\n                </h5>\r\n                <ProfileStatusContainer isMyProfile={isMyProfile} />\r\n            </div>\r\n            <div className='timeline-info__row'>\r\n                <div className=\"lookingForAJob\">\r\n\r\n                    <div className=\"small-subtitle\">\r\n                        <FontAwesomeIcon icon={\"fa-solid fa-address-card\" as any} />\r\n                        <span className=\"text\">About:</span>\r\n                        {aboutMeField}\r\n                    </div>\r\n                    <div className='lookingForAJobDescription-edit'>\r\n                        {jobDescriptionField}\r\n                    </div>\r\n                    <div\r\n                        className={style.jobStyle}\r\n                        onClick={toggleJobState}\r\n                    >\r\n                        <FontAwesomeIcon\r\n                            icon={`fa fa-briefcase` as any}\r\n                            className={style.icon}\r\n                        />\r\n                        <label htmlFor=\"lookingForAJob\">Job status:</label>\r\n                        <label\r\n                            className={jobBlockClassName}\r\n                            htmlFor=\"lookingForAJob\"\r\n                            style={{marginLeft: '5px', marginRight: '5px'}}\r\n                        >\r\n                            {lookingForAJobState\r\n                                ? ` looking for a job`\r\n                                : ` not interested in job`\r\n                            }\r\n                        </label>\r\n                        {jobCheckBox}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"edit-profile-buttons\">\r\n                <button\r\n                    type='submit'\r\n                    disabled={submitting || pristine}\r\n                    className=\"add-butn\"\r\n                >\r\n                    Save\r\n                </button>\r\n                <button\r\n                    onClick={disableEditMode}\r\n                    className=\"add-butn white\"\r\n                >\r\n                    Cancel\r\n                </button>\r\n            </div>\r\n            <div className={classNames(editSocialMediaClassName, 'links-form')}>\r\n                {contactsArray.map(singleContact => {\r\n                    const contactName = singleContact[0]\r\n                    const shouldReturnEmpty =\r\n                        contactName === 'website' ||\r\n                        contactName === 'vk' ||\r\n                        contactName === 'mainLink'\r\n                    if (shouldReturnEmpty) return ''\r\n\r\n                    return createFieldWithInitVal(\r\n                        [isLink],\r\n                        singleContact[0],\r\n                        contactsArray.indexOf(singleContact),\r\n                        singleContact[1] as string\r\n                    )\r\n\r\n                })}\r\n            </div>\r\n        </form>\r\n    );\r\n});\r\n\r\nexport default EditProfileForm;","import {Contacts, ContactsArray, EditProfileFormValues, SocialMediaName} from \"../../../../types/ProfileTypes\";\r\nimport React, {useMemo} from \"react\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {createCheckBox, createHiddenInput, createInput, createTextArea} from \"../../../../common/helpers/createField\";\r\nimport {required} from \"../../../../common/helpers/validators\";\r\nimport {maxLength120, maxLength20, minLength4} from \"../../../../common/helpers/createValidators\";\r\n\r\nexport const createUpdatedProfile = (formData: EditProfileFormValues) => ({\r\n    ...formData,\r\n    contacts: {\r\n        github: formData.github,\r\n        vk: null,\r\n        facebook: formData.facebook,\r\n        instagram: formData.instagram,\r\n        twitter: formData.twitter,\r\n        website: null,\r\n        youtube: formData.youtube,\r\n        mainLink: null\r\n    }\r\n})\r\n\r\nexport const useCreateIcons = (contactsArray: ContactsArray) => {\r\n    const contactIcons = useMemo(() =>\r\n            contactsArray.map((singleContact) => {\r\n            const name = singleContact[0]\r\n            const link = singleContact[1]\r\n            const doNotShowContact = !link || name === 'vk' || name === 'website' || name === 'mainLink'\r\n            if (doNotShowContact) return ''\r\n            return (\r\n                <div\r\n                    className='social-media__element'\r\n                    key={contactsArray.indexOf(singleContact)}\r\n                >\r\n                    <a href={`${link}`} target='_blank'>\r\n                    <FontAwesomeIcon icon={['fab', `fa-${name}` as any]}/>\r\n                    </a>\r\n                </div>\r\n            )\r\n        }),\r\n    [contactsArray])\r\n    return contactIcons\r\n}\r\n\r\nexport const useGetFields = () => useMemo(() => {\r\n    const userIdField = createHiddenInput('userId')\r\n    const jobCheckBox = createCheckBox('lookingForAJob', null)\r\n    const jobDescriptionField = createTextArea([maxLength120], 'lookingForAJobDescription')\r\n    const fullNameField = createInput(\r\n        [required, minLength4, maxLength20], 'text', 'fullName'\r\n    )\r\n    const aboutMeField = createInput([maxLength120], 'text', 'aboutMe')\r\n    return {\r\n        fullNameField, userIdField, jobDescriptionField, jobCheckBox, aboutMeField\r\n    }\r\n}, [])","import React, {FC, ForwardedRef, memo, useRef} from 'react';\r\nimport {Form} from \"react-final-form\"\r\nimport {\r\n    EditProfileFormValues,\r\n    EditProfilePutRequestData,\r\n    Profile\r\n} from \"../../../../types/ProfileTypes\";\r\nimport {createUpdatedProfile} from \"./utils\";\r\nimport EditProfileForm from \"./EditProfileForm\";\r\nimport {connect, ConnectedProps} from \"react-redux\";\r\nimport {RootState} from \"../../../../redux/redux-store\";\r\nimport {updateProfile} from \"../../../../redux/reducers/profileReducer/middleware\";\r\nimport {setProfileEditMode, setSocialMediaEditMode} from \"../../../../redux/reducers/profileReducer/actions\";\r\n\r\ninterface Props extends EditProfileConnectedProps {\r\n    updateProfile: (updatedProfile: EditProfilePutRequestData) => void\r\n    profile: Profile\r\n    profileEditMode: boolean\r\n    isMyProfile: boolean\r\n}\r\n\r\nconst EditProfile: FC<Props> = memo(({\r\n    updateProfile, isMyProfile, profile, setSocialMediaEditMode, contactsArray,\r\n    setProfileEditMode, profileEditMode, socialMediaEditMode\r\n}) => {\r\n    const toggleSubmenu = useRef<ForwardedRef<HTMLFormElement | null>>(null);\r\n\r\n    const onSubmit = (formData: EditProfileFormValues) => {\r\n        const updatedProfile = createUpdatedProfile(formData)\r\n        updateProfile(updatedProfile)\r\n        setProfileEditMode(false)\r\n    }\r\n    const disableEditMode = () => setProfileEditMode(false)\r\n    return <>\r\n        <Form\r\n            initialValues={profile}\r\n            onSubmit={onSubmit}\r\n            render={({handleSubmit, submitting, pristine}) => (\r\n                <EditProfileForm\r\n                    ref={toggleSubmenu}\r\n                    pristine={pristine}\r\n                    submitting={submitting}\r\n                    handleSubmit={handleSubmit}\r\n\r\n                    lookingForAJob={profile.lookingForAJob}\r\n                    isMyProfile={isMyProfile}\r\n                    profileEditMode={profileEditMode}\r\n                    disableEditMode={disableEditMode}\r\n                    socialMediaEditMode={socialMediaEditMode}\r\n                    contactsArray={contactsArray}\r\n                />\r\n            )}\r\n        />\r\n    </>\r\n});\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n    socialMediaEditMode: state.profilePage.socialMediaEditMode,\r\n    contactsArray: state.profilePage.contactsArray\r\n})\r\n\r\nconst connector = connect(mapStateToProps, {updateProfile, setProfileEditMode, setSocialMediaEditMode})\r\nexport default connector(EditProfile);\r\ntype EditProfileConnectedProps = ConnectedProps<typeof connector>","import React, {FC} from 'react';\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {Contacts, ContactsArray} from \"../../../types/ProfileTypes\";\r\nimport {useCreateIcons} from \"./EditProfile/utils\";\r\nimport {faPencilSquare, faClose} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {RootState} from \"../../../redux/redux-store\";\r\nimport {connect, ConnectedProps} from \"react-redux\";\r\nimport {setSocialMediaEditMode} from \"../../../redux/reducers/profileReducer/actions\";\r\n\r\ninterface Props extends ProfileLinksConnectedProps {\r\n    contactsArray: ContactsArray\r\n    profileEditMode: boolean\r\n    contacts: Contacts\r\n}\r\n\r\nconst ProfileLinks: FC<Props> = ({\r\n    contactsArray, profileEditMode, contacts,\r\n    socialMediaEditMode, setSocialMediaEditMode\r\n}) => {\r\n    const toggleSocialMediaEditMode = () => profileEditMode && setSocialMediaEditMode(!socialMediaEditMode)\r\n\r\n    const hasAnyLink = Object.values(contacts).find(contact => contact !== null)\r\n    const contactIcons = useCreateIcons(contactsArray)\r\n    if (!hasAnyLink && !profileEditMode) return <span></span>\r\n\r\n    return (\r\n        <div className=\"additional-profile-info\">\r\n            <div className=\"social-media\">\r\n                {contactIcons}\r\n                {!contactIcons && profileEditMode && 'Add your social media links'}\r\n                {profileEditMode &&\r\n                    <div\r\n                        className='edit-social-media'\r\n                        onClick={toggleSocialMediaEditMode}\r\n                    >\r\n                        {socialMediaEditMode &&\r\n                            <FontAwesomeIcon\r\n                                icon={faClose}\r\n                            />\r\n                        }\r\n                        {!socialMediaEditMode &&\r\n                            <FontAwesomeIcon\r\n                                icon={faPencilSquare}\r\n                            />\r\n                        }\r\n                    </div>\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n    socialMediaEditMode: state.profilePage.socialMediaEditMode,\r\n    contactsArray: state.profilePage.contactsArray\r\n})\r\nconst connector = connect(mapStateToProps, {setSocialMediaEditMode})\r\nexport default connector(ProfileLinks);\r\ntype ProfileLinksConnectedProps = ConnectedProps<typeof connector>","import React, {memo} from \"react\";\r\nimport ProfileInfo from \"./ProfileInfo\";\r\nimport ErrorComponent from \"../../../common/ErrorComponent\";\r\nimport FeedContainer from \"../../Feed/FeedContainer\";\r\nimport {ProfileProps} from \"./ProfileContainer\";\r\nimport ProfileHeader from \"./ProfileHeader\";\r\nimport EditProfile from \"./EditProfile\";\r\nimport ProfileLinks from \"./ProfileLinks\";\r\nimport FetchError from \"../../../common/FetchError\";\r\nimport ProfilePreloader from \"../../../preloaders/ProfilePreloader\";\r\n\r\nconst Profile = memo<ProfileProps>(({\r\n    profile, loadProfile, isMyProfile, localError, profileIsLoading,\r\n    profileEditMode, userId, profileFetchError\r\n }) => {\r\n    const refetchProfile = () => loadProfile(userId)\r\n    if (profileIsLoading && !localError) return <ProfilePreloader />\r\n    return (\r\n        <div className='central-meta'>\r\n            {localError &&\r\n                <ErrorComponent errorText={localError} />\r\n            }\r\n            {profileFetchError &&\r\n                <FetchError\r\n                    refetch={refetchProfile}\r\n                    errorText={profileFetchError}\r\n                />\r\n            }\r\n            {!profileFetchError && <>\r\n                <div className=\"feature-photo\">\r\n                    <div className=\"bg\">\r\n                        <div className=\"timeline-info\">\r\n                            <ProfileHeader profileLargePhoto={profile.photos?.large}/>\r\n                            <EditProfile\r\n                                profile={profile}\r\n                                profileEditMode={profileEditMode}\r\n                                isMyProfile={isMyProfile}\r\n                            />\r\n                            <ProfileInfo\r\n                                profileEditMode={profileEditMode}\r\n                                isMyProfile={isMyProfile}\r\n                                profile={profile}\r\n                            />\r\n                        </div>\r\n                        <ProfileLinks\r\n                            contacts={profile.contacts}\r\n                            profileEditMode={profileEditMode}\r\n                        />\r\n                    </div>\r\n                </div>\r\n                <FeedContainer/>\r\n            </>}\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default Profile;\r\n","import React, {FC, useEffect} from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {RootState} from \"../../../redux/redux-store\";\r\nimport {connect, ConnectedProps} from \"react-redux\";\r\nimport {getMyProfileFromState, loadProfile} from \"../../../redux/reducers/profileReducer/middleware\";\r\nimport {setIsMyProfile, setUserId} from \"../../../redux/reducers/profileReducer/actions\";\r\nimport {useParams} from \"react-router-dom\";\r\n\r\nconst ProfileContainer: FC<ProfileProps> = (props) => {\r\n    const id = useParams().userId\r\n    useEffect(() => {\r\n        // make sure that the userId won't be undefined\r\n        const userIdForState = id ? Number(id) : props.myId\r\n        props.setUserId(userIdForState)\r\n        const isMyProfile = userIdForState === props.myId || userIdForState === 0\r\n        if (isMyProfile) {\r\n            props.setIsMyProfile(true)\r\n            props.getMyProfileFromState()\r\n        }\r\n        else {\r\n            props.setIsMyProfile(false)\r\n            props.loadProfile(userIdForState)\r\n        }\r\n    }, [id, props.myId])\r\n    return (\r\n        <Profile {...props}/>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state: RootState) => {\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        myId: state.auth.userData.id,\r\n        localError: state.profilePage.localError,\r\n        isMyProfile: state.profilePage.isMyProfile,\r\n        profileEditMode: state.profilePage.profileEditMode,\r\n        userId: state.profilePage.userIdParam,\r\n        profileFetchError: state.profilePage.profileFetchError,\r\n        profileIsLoading: state.profilePage.profileIsLoading\r\n    }\r\n}\r\n\r\nconst connector = connect(mapStateToProps, {\r\n    loadProfile, setIsMyProfile, setUserId, getMyProfileFromState\r\n})\r\n\r\nexport default connector(ProfileContainer);\r\n\r\nexport type ProfileProps = ConnectedProps<typeof connector>"],"names":["memo","profile","isMyProfile","profileBlockClassName","profileEditMode","jobBlockClassName","lookingForAJob","style","className","fullName","ProfileStatusContainer","aboutMe","icon","lookingForAJobDescription","errorText","NewPostForm","onSubmit","render","handleSubmit","name","initialValue","component","faMusic","faFile","addPostActionCreator","formData","props","state","onPostChange","postNewText","profileImg","postList","src","alt","href","title","userName","profileBackground","likesCount","postText","postsSelector","createSelector","postPage","posts","profilePage","photos","small","map","postData","id","connect","auth","Feed","onPhotoUpload","onChange","type","accept","profileActions","isUpdating","isLoading","status","localError","setProfileEditMode","isInEditMode","setUserId","userId","setIsMyProfile","setSocialMediaEditMode","disableWhileRequest","followed","enterEditMode","onClick","FollowButton","disabled","MessageButton","userIdParam","connector","photoIsUpdating","updatePhoto","photo","dispatch","profileService","response","resultCode","ResultCodes","authActions","data","large","messages","setTimeout","appActions","profileLargePhoto","figureClassName","Preloader","UserPhoto","e","inputFiles","target","files","forwardRef","ref","submitting","pristine","disableEditMode","socialMediaEditMode","contactsArray","useMemo","userIdField","createHiddenInput","jobCheckBox","createCheckBox","jobDescriptionField","createTextArea","maxLength120","fullNameField","createInput","required","minLength4","maxLength20","aboutMeField","useState","lookingForAJobState","setLookingFoAJobState","formClassName","editSocialMediaClassName","classNames","htmlFor","marginLeft","marginRight","singleContact","contactName","createFieldWithInitVal","isLink","indexOf","EditProfile","updateProfile","toggleSubmenu","useRef","initialValues","updatedProfile","contacts","github","vk","facebook","instagram","twitter","website","youtube","mainLink","createUpdatedProfile","hasAnyLink","Object","values","find","contact","contactIcons","link","useCreateIcons","faClose","faPencilSquare","Profile","loadProfile","profileIsLoading","profileFetchError","ProfilePreloader","FetchError","refetch","myId","userData","usersService","isFollowing","profileData","getMyProfileFromState","getState","myProfileFromState","clientProfile","useParams","useEffect","userIdForState","Number"],"sourceRoot":""}