{"version":3,"file":"static/js/582.63cf6fb0.chunk.js","mappings":"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","sources":["components/MainContent/Messages/Dialogs/SidebarHeader.tsx","components/MainContent/Messages/Dialogs/DialogsSearchForm.tsx","components/MainContent/Messages/Dialogs/Dialogs.tsx","common/assets/img/send.svg","components/MainContent/Messages/NewMessage.tsx","components/MainContent/Messages/ConversationHead.tsx","components/MainContent/Messages/Messages.tsx","components/MainContent/Messages/MessagesContainer.tsx"],"sourcesContent":["import React, {FC} from 'react';\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faSquarePlus, faXmark} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\ninterface Props {\r\n    searchMode: boolean\r\n    setSearchMode: (isSearchMode: boolean) => void\r\n}\r\n\r\nconst SidebarHeader: FC<Props> = ({searchMode, setSearchMode}) => {\r\n    const closeSearch = () => setSearchMode(false)\r\n    const openSearch = () => setSearchMode(true)\r\n    return (\r\n        <div className=\"sidebarHeader\">\r\n            {searchMode && <>\r\n                <span className=\"text opacity-animation\">Find people</span>\r\n                <FontAwesomeIcon\r\n                    className='opacity-animation'\r\n                    onClick={closeSearch}\r\n                    icon={faXmark}\r\n                />\r\n            </>}\r\n            {!searchMode && <>\r\n                <span className=\"text opacity-animation\">Messages</span>\r\n                <FontAwesomeIcon\r\n                    className='opacity-animation'\r\n                    onClick={openSearch}\r\n                    icon={faSquarePlus}\r\n                />\r\n            </>}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default SidebarHeader;","import React, {FC} from 'react';\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faSearch} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {Field, Form} from \"react-final-form\";\r\nimport {required} from \"../../../../common/helpers/validators\";\r\nimport {isSearchFieldEmpty} from \"../../../../common/FormControl/formHelpers\";\r\nimport {FormApi} from \"final-form\";\r\nimport {useParams} from \"react-router-dom\";\r\n\r\ninterface Props {\r\n    setDialogs: (id: number) => void\r\n    filterDialogs: (userName: string) => void\r\n}\r\n\r\nexport interface SearchDialogsFormValues {\r\n    searchBody: string\r\n}\r\n\r\nconst DialogsSearchForm: FC<Props> = ({filterDialogs, setDialogs}) => {\r\n    const userId = Number(useParams().userId);\r\n    const dialogsSearch = (formData: any) => {\r\n        filterDialogs(formData.searchBody)\r\n    }\r\n    const handleKeyUp = (e: KeyboardEvent, form: FormApi<SearchDialogsFormValues>) => {\r\n        isSearchFieldEmpty(e, form, setDialogs, userId)\r\n        form.submit()\r\n    }\r\n    return (\r\n        <div className=\"search-users pointer\">\r\n            <FontAwesomeIcon icon={faSearch} />\r\n            <Form\r\n                onSubmit={dialogsSearch}\r\n                render={\r\n                    ({handleSubmit, form}) => (\r\n                        <form onSubmit={handleSubmit}>\r\n                            <Field\r\n                                name='searchBody'\r\n                                autoFocus validate={required}\r\n                                onKeyUp={(e: KeyboardEvent) => handleKeyUp(e, form)}\r\n                                component='input'\r\n                                placeholder='Find dialog by name'\r\n                                className=\"search-users__input\"\r\n                            />\r\n                        </form>\r\n                    )}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DialogsSearchForm;","import React, {FC, useState} from \"react\";\r\nimport UsersContainer from \"../../../../features/Users/UsersContainer\";\r\nimport {connect, ConnectedProps} from \"react-redux\";\r\nimport {RootState} from \"../../../../redux/redux-store\";\r\nimport {filterDialogs, getDialog, setDialogs} from \"../../../../redux/reducers/messagesReducer/middleware\";\r\nimport SidebarHeader from \"./SidebarHeader\";\r\nimport DialogsSearchForm from \"./DialogsSearchForm\";\r\nimport DialogsList from \"../../../../features/DialogsList\";\r\n\r\nconst Dialogs: FC<DialogsConnectedProps> = ({\r\n    filterDialogs, getDialog\r\n}) => {\r\n    const [searchMode, setSearchMode] = useState(false);\r\n    return (\r\n        <ul className=\"peoples\">\r\n            <SidebarHeader\r\n                searchMode={searchMode}\r\n                setSearchMode={setSearchMode}\r\n            />\r\n            <div className={searchMode ? 'shown' : 'hidden'}>\r\n                <UsersContainer\r\n                    setSearchMode={setSearchMode}\r\n                    getDialog={getDialog}\r\n                />\r\n            </div>\r\n            <div className={!searchMode ? 'shown' : 'hidden'}>\r\n                <DialogsSearchForm\r\n                    setDialogs={setDialogs}\r\n                    filterDialogs={filterDialogs}\r\n                />\r\n                <div className=\"dialogs-list\">\r\n                    <DialogsList />\r\n                </div>\r\n            </div>\r\n        </ul>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n\r\n})\r\n\r\nconst connector = connect(\r\n    mapStateToProps,\r\n    {getDialog, filterDialogs}\r\n)\r\n\r\nexport default connector(Dialogs)\r\nexport type DialogsConnectedProps = ConnectedProps<typeof connector>","var _path;\n\nvar _excluded = [\"title\", \"titleId\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nfunction SvgSend(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 180,\n    height: 190,\n    viewBox: \"0 0 18 19\",\n    fill: \"white\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M10.7537 18.0376C11.4324 18.0376 11.8933 17.5097 12.2117 16.6969L17.7671 2.16736C17.9095 1.79868 17.985 1.47189 17.985 1.19537C17.985 0.558552 17.5828 0.15635 16.9459 0.15635C16.6694 0.15635 16.3426 0.231763 15.9739 0.374209L1.38574 5.95477C0.648368 6.23966 0.10372 6.70889 0.10372 7.38761C0.10372 8.20877 0.707023 8.53556 1.54494 8.78694L5.75969 10.0773C6.37975 10.2701 6.74844 10.2617 7.19253 9.85948L16.6191 1.17023C16.7448 1.0613 16.8873 1.06968 16.9795 1.16186C17.0716 1.24565 17.08 1.40485 16.9711 1.52216L8.30697 10.9572C7.9299 11.3677 7.88801 11.7867 8.07235 12.3984L9.33761 16.5377C9.59737 17.4008 9.92416 18.0376 10.7537 18.0376Z\",\n    fill: \"white\"\n  })));\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgSend);\nexport default __webpack_public_path__ + \"static/media/send.2ec83b7d2370fbd448eddc161ecfe473.svg\";\nexport { ForwardRef as ReactComponent };","import React, {FC} from \"react\";\r\nimport {FormApi} from \"final-form\";\r\nimport {Field, Form} from \"react-final-form\";\r\nimport send from \"../../../common/assets/img/send.svg\";\r\n\r\nexport interface NewMessageForm {\r\n    body: string\r\n}\r\n\r\nconst NewMessage: FC<{sendMessage: (formData: any) => void}> = ({sendMessage}) => {\r\n    const sendMessageOnEnter = (e: React.KeyboardEvent, form: FormApi<NewMessageForm>) => {\r\n        if (e.key === 'Enter') {\r\n            e.preventDefault()\r\n            form.submit()\r\n            form.reset()\r\n        }\r\n    }\r\n    return (\r\n        <div className=\"message-text-container\">\r\n            <Form\r\n                onSubmit={sendMessage}\r\n                render={\r\n                    ({handleSubmit, submitting, pristine, form}) => (\r\n                        <form onSubmit={handleSubmit}>\r\n                            <Field\r\n                                onKeyDown={\r\n                                    (e: React.KeyboardEvent) => sendMessageOnEnter(e, form)\r\n                                }\r\n                                name='body'\r\n                                component='textarea'\r\n                                placeholder='Text a message'\r\n                            />\r\n                            <button disabled={submitting || pristine}>\r\n                                <img src={send} alt=\"\"/>\r\n                            </button>\r\n                        </form>\r\n                )}\r\n            />\r\n        </div>\r\n    )\r\n}\r\nexport default NewMessage;","import React, {FC} from 'react';\r\nimport {connect, ConnectedProps} from \"react-redux\";\r\nimport {RootState} from \"../../../redux/redux-store\";\r\nimport userImg from \"../../../common/assets/img/userIcon.jpg\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst ConversationHead: FC<ConversationHeadProps> = ({conversationHead}) => {\r\n    const headerImage = conversationHead.photo ? conversationHead.photo : userImg\r\n    return (\r\n        <NavLink\r\n            replace\r\n            to={`/profile/${conversationHead.id}`}\r\n            className=\"conversation-head\"\r\n        >\r\n            <figure>\r\n                <img src={headerImage} alt=\"\"/>\r\n            </figure>\r\n            <span>{conversationHead.userName}</span>\r\n        </NavLink>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state: RootState) => ({\r\n    conversationHead: state.messagesPage.conversationHead\r\n})\r\n\r\nconst connector = connect(mapStateToProps, {})\r\n\r\nexport default connector(ConversationHead)\r\nexport type ConversationHeadProps = ConnectedProps<typeof connector>","import React, {FC, useEffect, useRef} from \"react\";\r\nimport {useParams} from \"react-router-dom\";\r\nimport Preloader from \"../../../preloaders/Preloader\";\r\nimport {MessagesPropsType} from \"./MessagesContainer\";\r\nimport Dialogs from \"./Dialogs/Dialogs\";\r\nimport NewMessage from \"./NewMessage\";\r\nimport ConversationHead from \"./ConversationHead\";\r\nimport {isElementScrolledToBottom} from \"../../../common/helpers/isElementScrolledToBottom\";\r\n\r\nconst Messages: FC<MessagesPropsType> = ({\r\n    messages, setAllMessages, sendNewMessage\r\n}) => {\r\n    const userId = Number(useParams().userId);\r\n    const messagesContainer = useRef<HTMLUListElement>(null);\r\n    const scrollToBottom = () => {\r\n        if (messagesContainer.current) {\r\n            messagesContainer.current.scrollTop = messagesContainer.current.scrollHeight\r\n        }\r\n    }\r\n    const loadMessages = () => setAllMessages(userId)\r\n    const sendMessage = (formData: any) => {\r\n        sendNewMessage(userId, formData)\r\n    }\r\n    useEffect(() => {\r\n        const requireMessagesInterval = setInterval( loadMessages, 5000 )\r\n        if (userId) loadMessages()\r\n        else clearInterval(requireMessagesInterval)\r\n        return () => clearInterval(requireMessagesInterval)\r\n    }, [userId])\r\n    useEffect(() => {\r\n        const isScrolledToBottom = isElementScrolledToBottom(messagesContainer.current)\r\n        if (isScrolledToBottom && messages[0]) scrollToBottom()\r\n    }, [messages])\r\n    useEffect(() => scrollToBottom(), [])\r\n    return <div className=\"central-meta messages\">\r\n        <div className=\"messages\">\r\n            <div className=\"message-box\">\r\n                <Dialogs />\r\n                <div className=\"peoples-mesg-box\">\r\n                    {userId &&\r\n                        <div className='chatArea opacity-animation'>\r\n                            <ConversationHead/>\r\n                            <ul\r\n                                className=\"chatting-area ps-container ps-theme-default ps-active-y\"\r\n                                ref={messagesContainer}\r\n                            >\r\n                                {messages[0] ? messages : <Preloader/>}\r\n                            </ul>\r\n                            <NewMessage sendMessage={sendMessage}/>\r\n                        </div>\r\n                    }\r\n                    {!userId &&\r\n                        <div className='fetch-error'>Choose friend to start chat</div>\r\n                    }\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default Messages","import React, {FC} from \"react\";\r\nimport {sendNewMessage, setAllMessages, setDialogs} from \"../../../redux/reducers/messagesReducer/middleware\";\r\nimport Messages from \"./Messages\";\r\nimport {connect, ConnectedProps} from \"react-redux\";\r\nimport {messagesReselect} from \"../../../redux/selectors/messagesSelector\";\r\nimport {RootState} from \"../../../redux/redux-store\";\r\n\r\nconst MessagesContainer: FC<MessagesPropsType> = (props) => {\r\n    return (\r\n        <Messages {...props} />\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state: RootState) => {\r\n    return {\r\n        messages: messagesReselect(state)\r\n    }\r\n}\r\n\r\nconst connector = connect(\r\n    mapStateToProps,\r\n    {sendNewMessage, setAllMessages, setDialogs}\r\n)\r\n\r\nexport default connector(MessagesContainer);\r\n\r\nexport type MessagesPropsType = ConnectedProps<typeof connector>"],"names":["searchMode","setSearchMode","className","onClick","icon","faXmark","faSquarePlus","filterDialogs","setDialogs","userId","Number","useParams","faSearch","onSubmit","formData","searchBody","render","handleSubmit","form","name","autoFocus","validate","required","onKeyUp","e","isSearchFieldEmpty","submit","handleKeyUp","component","placeholder","connect","state","getDialog","useState","UsersContainer","DialogsList","sendMessage","submitting","pristine","onKeyDown","key","preventDefault","reset","sendMessageOnEnter","disabled","src","send","alt","conversationHead","messagesPage","headerImage","photo","userImg","replace","to","id","userName","messages","setAllMessages","sendNewMessage","messagesContainer","useRef","scrollToBottom","current","scrollTop","scrollHeight","loadMessages","useEffect","requireMessagesInterval","setInterval","clearInterval","isElementScrolledToBottom","ref","Preloader","messagesReselect","props"],"sourceRoot":""}